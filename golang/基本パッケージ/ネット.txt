https://golang.org/pkg/net/

package net

＜概要＞
TCP/IP、UDP、DNS、UNIXドメインソケットを含むネットワークIOのポータブルなインタフェースを提供する
低レベルのネットワークのプリミティブを提供するが、基本インタフェース以外ほとんどの場合は使わない
crypto/tlsにも同様のDialとListen機能を提供している

・Dial（ダイアル）機能
サーバに接続する

conn, err := net.Dial("tcp", "golang.org:80")
if err != nil {
	// handle error
}
fmt.Fprintf(conn, "GET / HTTP/1.0\r\n\r\n")
status, err := bufio.NewReader(conn).ReadString('\n')
// ...

・Listen（リッスン）機能
サーバを作る

ln, err := net.Listen("tcp", ":8080")
if err != nil {
	// handle error
}
for {
	conn, err := ln.Accept()
	if err != nil {
		// handle error
	}
	go handleConnection(conn)
}

・名前解決
DNS関連はDialやLookupHost、LookupAddrを使ってもOSによって異なる
UNIXシステム
２つオプションがある
/etc/resolv.confにリストされたサーバに直接DNS要求を送信する純粋なGOリゾルバ
getaddrinfoやgetnameinfoなどのCライブラリルーチンを呼び出すcgoベースのリゾルバ

デフォルトはGo純正のリゾルバ
OSのスレッドを消費するCに対してGoはゴールーチンだけ消費するため
GODEBUG環境変数のnetdns値によってgoまたはcgoを切り替えられる
export GODEBUG=netdns=go    # force pure Go resolver
export GODEBUG=netdns=cgo   # force cgo resolver

Windowsの場合リゾルバは常にGetAddrInfoやDnsQueryなどのCライブラリ関数を利用する

＜定数＞
・IPアドレス長（bytes）
const (
        IPv4len = 4
        IPv6len = 16
)

＜変数＞
・Well-knownIPアドレス
var (
        IPv4bcast     = IPv4(255, 255, 255, 255) // limited broadcast
        IPv4allsys    = IPv4(224, 0, 0, 1)       // all systems
        IPv4allrouter = IPv4(224, 0, 0, 2)       // all routers
        IPv4zero      = IPv4(0, 0, 0, 0)         // all zeros
)

・Well-knownIPv6アドレス
var (
        IPv6zero                   = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        IPv6unspecified            = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        IPv6loopback               = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
        IPv6interfacelocalallnodes = IP{0xff, 0x01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01}
        IPv6linklocalallnodes      = IP{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01}
        IPv6linklocalallrouters    = IP{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x02}
)

・デフォルトリゾルバ
パッケージレベルのLookup関数と特別なリゾルバなしのダイアラーが使うデフォルトのリゾルバ
var DefaultResolver = &Resolver{}

＜パッケージ関数＞
・func JoinHostPort(host, port string) string
ホストとポートをhost:portの形式のネットワークアドレスに結合する
IPv6のようにホストに:が含まれる場合は[host]:portを返す

・func LookupAddr(addr string) (names []string, err error)
指定されたアドレスの逆引きを行い、アドレスにマッピングされている名前のリストを返す
IPアドレスをaddrにつっこむ
該当があるとドメインが返ってくる

・func LookupCNAME(host string) (cname string, err error)
ホストの正規名を返す
ホストはgolang.orgとか。IPアドレスではない

・func LookupHost(host string) (addrs []string, err error)
ホストのIPアドレスを返す
v6とv4とかで返ってくる場合もあり（↓こんな）
[2404:6800:4004:80d::2011 216.58.197.241]

・func LookupPort(network, service string) (port int, err error)
与えられたネットワークとサービスのポートを返す
networkは"tcp"か"udp"、serviceは実行しているサービス、例えば"telent"、"http"、"ssh"とか　らしい
net.LookupPort("tcp", "http")は80が返ってくる
ローカルでサービスが起動してるとかは関係ない

・func LookupTXT(name string) ([]string, error)
指定したドメインのTXTを返す

・func ParseCIDR(s string) (IP, *IPNet, error)
ParseCIDR("192.0.2.1/24") でIPアドレス192.0.2.1とネットワーク192.0.2.0/24を返す

・func Pipe() (Conn, Conn)
同期のインメモリ全2重ネットワーク接続を作成する
両端はConnインタフェースを実装する
一方の端での読み込みはもう一方での書き込みと一致し、２つの間でデータが直接コピーされる
内部バッファリングはない

・func SplitHostPort(hostport string) (host, port string, err error)
host:port, host%zon:port, [host]:port, [host%zone]:portを
hostまたはhost%zoneとportに分ける


＜インタフェース＞

・type Addr interface {
        Network() string // name of the network (for example, "tcp", "udp")
        String() string  // string form of address (for example, "192.0.2.1:25", "[2001:db8::1]:80")
}
ネットワークエンドポイントアドレス
Dialに渡すための2つの関数を持つ

・func InterfaceAddrs() ([]Addr, error)
システムのユニキャストインタフェースアドレスのリストを返す


・type Conn interface {
        // 接続からデータを読み込む
        Read(b []byte) (n int, err error)

        // 接続にデータを書き込む
        Write(b []byte) (n int, err error)

        // 接続を閉じる
        // ブロックされていた読み込み、書き込み操作はブロックが解除されエラーが返る
        Close() error

        // ローカルネットワークアドレス
        LocalAddr() Addr

        // リモートネットワークアドレス
        RemoteAddr() Addr

        // Read、Write両方に対してデッドラインを設定する
        SetDeadline(t time.Time) error

        // 読み込みのデッドライン
        SetReadDeadline(t time.Time) error

        // 書き込みのデッドライン
        SetWriteDeadline(t time.Time) error
}
一般的なストリーム指向のネットワーク接続
Connインタフェースの実装として
type IPConn struct {
        // contains filtered or unexported fields
}
や
type TCPConn struct {
        // contains filtered or unexported fields
}
type UDPConn struct {
        // contains filtered or unexported fields
}
がある

また似たようなインタフェースに下記がある
type PacketConn interface {
        ReadFrom(p []byte) (n int, addr Addr, err error)

        WriteTo(p []byte, addr Addr) (n int, err error)

        Close() error

        LocalAddr() Addr

        SetDeadline(t time.Time) error

        SetReadDeadline(t time.Time) error

        SetWriteDeadline(t time.Time) error
}

・func Dial(network, address string) (Conn, error)
指定したネットワーク上のアドレスに接続する
ネットワークは
 "tcp", "tcp4" (IPv4-only), "tcp6" (IPv6-only), 
 "udp", "udp4" (IPv4-only), "udp6" (IPv6-only), 
 "ip", "ip4" (IPv4-only), "ip6" (IPv6-only), 
 "unix", "unixgram" and "unixpacket".

        Dial("tcp", "golang.org:http")
        Dial("tcp", "192.0.2.1:http")
        Dial("tcp", "198.51.100.1:80")
        Dial("udp", "[2001:db8::1]:domain")
        Dial("udp", "[fe80::1%lo0]:53")
        Dial("tcp", ":80")

・func DialTimeout(network, address string, timeout time.Duration) (Conn, error)
Dialとほぼ一緒だがタイムアウトする

・func FileConn(f *os.File) (c Conn, err error)
開いているファイルに対応するネットワーク接続のコピーを返す
終了したファイルを閉じるのは呼び出し側の責任


・type Listener interface {
        // 待機して次の接続を返す
        Accept() (Conn, error)

        // リスナーをクローズする
        // Any blocked Accept operations will be unblocked and return errors.
        Close() error

        // Addr returns the listener's network address.
        Addr() Addr
}
ネットワークリスナー
複数のゴールーチンがリスナーのメソッドを同時に呼ぶことがある

・func FileListener(f *os.File) (ln Listener, err error)
ファイルのリスナー

・func Listen(network, address string) (Listener, error)
ローカルネットワークで接続をリッスンする

実装クラスとして例えば下記がある
type TCPListener struct {
        // contains filtered or unexported fields
}


＜構造体＞
・type Dialer struct {
        // The default is no timeout.
        Timeout time.Duration

        Deadline time.Time

        LocalAddr Addr

        DualStack bool // Go 1.2

        FallbackDelay time.Duration // Go 1.5

        KeepAlive time.Duration // Go 1.3

        // Resolver optionally specifies an alternate resolver to use.
        Resolver *Resolver // Go 1.8

        Cancel <-chan struct{} // Go 1.6

        Control func(network, address string, c syscall.RawConn) error // Go 1.11
}
各フィールドのゼロ値はオプションなしでDialするのと同じ
Dialに対して設定して呼びだしたい場合に使う

・func (d *Dialer) Dial(network, address string) (Conn, error)
・func (d *Dialer) DialContext(ctx context.Context, network, address string) (Conn, error)


