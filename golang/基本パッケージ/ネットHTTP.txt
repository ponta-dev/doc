package net/http

https://golang.org/pkg/net/http/

＜概要＞
・クライアント
HTTPクライアントとHTTPサーバの機能を提供する

resp, err := http.Get("http://example.com/")
...
resp, err := http.Post("http://example.com/upload", "image/jpeg", &buf)
...
resp, err := http.PostForm("http://example.com/form",
	url.Values{"key": {"Value"}, "id": {"123"}})

のようにHTTPリクエストを行う
HTTPリクエストの後はクライアントはリクエストボディを閉じる必要がある
resp, err := http.Get("http://example.com/")
if err != nil {
	// handle error
}
defer resp.Body.Close()

HTTPクライアントのヘッダー、リクエストポリシーなどの設定を行う場合はClient構造体を使う
プロキシ、TLS,キープアライブ、圧縮などの制御をする場合はTransport構造体を使う
Transportは使いまわし推奨であり複数ゴールーチンの使用に耐える


・サーバ
ListenAndServeは与えられたアドレスとハンドラでHTTPサーバを起動する
ハンドラはDefaultServeMuxに対してハンドラを追加する形
DefaultServeMuxはパッケージの変数

Server構造体を使うことでカスタムサーバを作ることができる
s := &http.Server{
	Addr:           ":8080",
	Handler:        myHandler,
	ReadTimeout:    10 * time.Second,
	WriteTimeout:   10 * time.Second,
	MaxHeaderBytes: 1 << 20,
}
log.Fatal(s.ListenAndServe())

HTTPSを利用する場合HTTP/2プロトコルをサポートする
変えたい場合はカスタムサーバを使う



＜定数＞
const (
        MethodGet     = "GET"
        MethodHead    = "HEAD"
        MethodPost    = "POST"
        MethodPut     = "PUT"
        MethodPatch   = "PATCH" // RFC 5789
        MethodDelete  = "DELETE"
        MethodConnect = "CONNECT"
        MethodOptions = "OPTIONS"
        MethodTrace   = "TRACE"
)


const (
        StatusContinue           = 100 // RFC 7231, 6.2.1
        StatusSwitchingProtocols = 101 // RFC 7231, 6.2.2
        StatusProcessing         = 102 // RFC 2518, 10.1

        StatusOK                   = 200 // RFC 7231, 6.3.1
        StatusCreated              = 201 // RFC 7231, 6.3.2
        StatusAccepted             = 202 // RFC 7231, 6.3.3
        StatusNonAuthoritativeInfo = 203 // RFC 7231, 6.3.4
        StatusNoContent            = 204 // RFC 7231, 6.3.5
        StatusResetContent         = 205 // RFC 7231, 6.3.6
        StatusPartialContent       = 206 // RFC 7233, 4.1
        StatusMultiStatus          = 207 // RFC 4918, 11.1
        StatusAlreadyReported      = 208 // RFC 5842, 7.1
        StatusIMUsed               = 226 // RFC 3229, 10.4.1

        StatusMultipleChoices  = 300 // RFC 7231, 6.4.1
        StatusMovedPermanently = 301 // RFC 7231, 6.4.2
        StatusFound            = 302 // RFC 7231, 6.4.3
        StatusSeeOther         = 303 // RFC 7231, 6.4.4
        StatusNotModified      = 304 // RFC 7232, 4.1
        StatusUseProxy         = 305 // RFC 7231, 6.4.5

        StatusTemporaryRedirect = 307 // RFC 7231, 6.4.7
        StatusPermanentRedirect = 308 // RFC 7538, 3

        StatusBadRequest                   = 400 // RFC 7231, 6.5.1
        StatusUnauthorized                 = 401 // RFC 7235, 3.1
        StatusPaymentRequired              = 402 // RFC 7231, 6.5.2
        StatusForbidden                    = 403 // RFC 7231, 6.5.3
        StatusNotFound                     = 404 // RFC 7231, 6.5.4
        StatusMethodNotAllowed             = 405 // RFC 7231, 6.5.5
        StatusNotAcceptable                = 406 // RFC 7231, 6.5.6
        StatusProxyAuthRequired            = 407 // RFC 7235, 3.2
        StatusRequestTimeout               = 408 // RFC 7231, 6.5.7
        StatusConflict                     = 409 // RFC 7231, 6.5.8
        StatusGone                         = 410 // RFC 7231, 6.5.9
        StatusLengthRequired               = 411 // RFC 7231, 6.5.10
        StatusPreconditionFailed           = 412 // RFC 7232, 4.2
        StatusRequestEntityTooLarge        = 413 // RFC 7231, 6.5.11
        StatusRequestURITooLong            = 414 // RFC 7231, 6.5.12
        StatusUnsupportedMediaType         = 415 // RFC 7231, 6.5.13
        StatusRequestedRangeNotSatisfiable = 416 // RFC 7233, 4.4
        StatusExpectationFailed            = 417 // RFC 7231, 6.5.14
        StatusTeapot                       = 418 // RFC 7168, 2.3.3
        StatusMisdirectedRequest           = 421 // RFC 7540, 9.1.2
        StatusUnprocessableEntity          = 422 // RFC 4918, 11.2
        StatusLocked                       = 423 // RFC 4918, 11.3
        StatusFailedDependency             = 424 // RFC 4918, 11.4
        StatusTooEarly                     = 425 // RFC 8470, 5.2.
        StatusUpgradeRequired              = 426 // RFC 7231, 6.5.15
        StatusPreconditionRequired         = 428 // RFC 6585, 3
        StatusTooManyRequests              = 429 // RFC 6585, 4
        StatusRequestHeaderFieldsTooLarge  = 431 // RFC 6585, 5
        StatusUnavailableForLegalReasons   = 451 // RFC 7725, 3

        StatusInternalServerError           = 500 // RFC 7231, 6.6.1
        StatusNotImplemented                = 501 // RFC 7231, 6.6.2
        StatusBadGateway                    = 502 // RFC 7231, 6.6.3
        StatusServiceUnavailable            = 503 // RFC 7231, 6.6.4
        StatusGatewayTimeout                = 504 // RFC 7231, 6.6.5
        StatusHTTPVersionNotSupported       = 505 // RFC 7231, 6.6.6
        StatusVariantAlsoNegotiates         = 506 // RFC 2295, 8.1
        StatusInsufficientStorage           = 507 // RFC 4918, 11.5
        StatusLoopDetected                  = 508 // RFC 5842, 7.2
        StatusNotExtended                   = 510 // RFC 2774, 7
        StatusNetworkAuthenticationRequired = 511 // RFC 6585, 6
)



＜変数＞
エラー回り色々

・var DefaultClient = &Client{}
Get,Head、Postがデフォルトで使うクライアント

・var DefaultServeMux = &defaultServeMux
Serveが利用するデフォルトのサーバ



＜関数＞
・func CanonicalHeaderKey(s string) string
最初の文字とハイフンに続く任意の文字を大文字に変換する
残りは小文字に変換
たとえば、 "accept-encoding"の正規のキーは "Accept-Encoding"

・func DetectContentType(data []byte) string
最大512バイトのデータしか考慮しないが常に有効なMIMEタイプを返す
判定できない場合は"application / octet-stream"

・func Error(w ResponseWriter, error string, code int)
指定されたエラーメッセージとHTTPコードでリクエストに応答する
呼び出し側は、これ以上wへの書き込みが行われないようにする必要がある

・func Handle(pattern string, handler Handler)
DefaultServeMuxにハンドラとパスを追加する

・func HandleFunc(pattern string, handler func(ResponseWriter, *Request))
DefaultServeMuxにハンドラ関数とパスを追加する

・func ListenAndServe(addr string, handler Handler) error
登録されたハンドラとともにHTTPサーバを立ち上げる
ハンドラは通常nilで、その場合DefaultServeMuxを利用する
常にnil以外のerrorを返す

・func ListenAndServeTLS(addr, certFile, keyFile string, handler Handler) error
HTTPSサーバを立てるために使う
http.ListenAndServeTLS(":8443", "cert.pem", "key.pem", nil)とか

・func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser
着信要求本文のサイズを制限するためのリーダー
クライアントからの大量の要求の送信に対してサーバリソースの無駄遣いを防ぐ

・func NotFound(w ResponseWriter, r *Request)
404でレスポンスする

・func ProxyFromEnvironment(req *Request) (*url.URL, error)
特定のリクエストに使用するProxyサーバのURLを返す

・func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error)
Transportで使うための常に同じURLを返すプロキシ関数を返す

・func Redirect(w ResponseWriter, r *Request, url string, code int)
URLのリダイレクトをする
codeは3xx系のコードである必要がある（通常はStatusMovedPermanently、StatusFoundまたはStatusSeeOther）
Content-Typeヘッダーが設定されていない場合、"text/html; charset=utf-8"を設定し、
小さなHTMLを本文に書き込む
Content-Typeヘッダーをnilを含み編集した場合はその動作はしない

・func Serve(l net.Listener, handler Handler) error
netパッケージのListenerを使ったサーバを作る
HandlerはなければDefaultが起動する

・func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker)
提供されたReadSpeekerを使用してリクエストにこたえる

・func ServeFile(w ResponseWriter, r *Request, name string)
指定されたファイル、またはディレクトリでリクエストに答える
ディレクトリ名が相対パスの場合は現在のディレクトリからの相対パスとして扱う

提供された名前がユーザからの入力で構成されている場合はセキュリティの観点からサニタイズされている必要がある
この予防としてr.URL.Pathに..が含まれる要求を拒否する
また/index.htmlで終わるすべての要求を同じパスにリダイレクトする
このリダイレクトの回避をしたい場合はパスを変更するかServeContentを利用する
この2つの場合を除いて通常URLは利用しない

・func SetCookie(w ResponseWriter, cookie *Cookie)
Cookieを設定する

・func StatusText(code int) string
コードのステータスやコンテキストを返す


・func Get(url string) (resp *Response, err error)
Clientを使わない形でのGetリクエスト
結果のレスポンスが返る
実際はDefaultClientを利用したGetアクセス


＜構造体＞

・type Client struct {
        Transport RoundTripper

        CheckRedirect func(req *Request, via []*Request) error

        Jar CookieJar

        Timeout time.Duration // Go 1.3
}

ClientはHTTPクライアント
デフォルトだとDeafaultTransportを使用する
クライアントのTraansportは通常内部状態（キャッシュされたTCP接続）をもっているので、
クライアントは必要に応じてではなく使いまわしをするべき

Cookieやリダイレクトも処理する
リダイレクトに従うと最初のリクエストで設定されたすべてのヘッダーを転送する
機密性の高いヘッダはドメインが完全一致でない場合は無視される

・func (c *Client) CloseIdleConnections()
キープアライブ状態でアイドルになっているトランスポート上のすべての接続を閉じる
使用している接続を中断することはない

・func (c *Client) Do(req *Request) (*Response, error)
クライアントで設定されているポリシー（リダイレクト、Cookie、認証など）に従って
HTTP要求を送信しHTTPレスポンスを返す
ネットワーク系の問題で通信に失敗したときにエラーを返す
2xx以外のステータスでもエラーは返さない

リクエストボディがnil以外の場合、エラーも含めて元のTransportによってクローズされる
サーバがリダイレクトで応答したとき、クライアントは最初にCheckRedirectによりリダイレクトするかを判断する
許可されている場合は3xx系のステータスコードをもとにリダイレクト先にGetする

カスタムリクエストを作成した場合の実行はDoを使って行う

・func (c *Client) Get(url string) (resp *Response, err error)
指定したURLに対してGetする
リダイレクトの挙動はCheckRedirect
カスタムヘッダでのリクエストはNewRequestとClient.DOを使う
呼び出し完了後resp.Bodyは閉じる必要がある

・func (c *Client) Head(url string) (resp *Response, err error)
指定したURLにHEADする

・func (c *Client) Post(url, contentType string, body io.Reader) (resp *Response, err error)
POSTを発行する
呼び出し元は呼び出し終わったらresp.Bodyをクローズする必要がある

・func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error)
リクエストボディにURLエンコードされたデータのキーと値でPOSTする場合
Content-Typeヘッダーはapplication / x-www-form-urlencodedに設定される
他のヘッダを使う場合はカスタムクライアントを作る



・type Cookie struct {
        Name  string
        Value string

        Path       string    // optional
        Domain     string    // optional
        Expires    time.Time // optional
        RawExpires string    // for reading cookies only

        // MaxAge=0 means no 'Max-Age' attribute specified.
        // MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0'
        // MaxAge>0 means Max-Age attribute present and given in seconds
        MaxAge   int
        Secure   bool
        HttpOnly bool
        SameSite SameSite // Go 1.11
        Raw      string
        Unparsed []string // Raw text of unparsed attribute-value pairs
}

HTTP応答のSet-CookieヘッダーまたはHTTP要求のCookieヘッダーで送信されたHTTP Cookieを表す


・type Dir string
サーバのファイルシステムの実装？

・func (d Dir) Open(name string) (File, error)

・type HandlerFunc func(ResponseWriter, *Request)
受け取った関数を実行するハンドラ


・type Header map[string][]string
HTTPヘッダーのキーバリューのペアを表す
CanonicalHeaderKeyによって返されるように、キーは正規形式である必要がある

・func (h Header) Add(key, value string)
ヘッダーにキーバリューを追加する
勝手に正規化するのでキーは大文字小文字を意識しない

・func (h Header) Del(key string)
ヘッダーからキーバリューを削除する
正規化はAdd同様

・func (h Header) Get(key string) string
指定したキーのバリューをゲットする
なければ""が返る
正規化はAdd同様

・func (h Header) Set(key, value string)
書き換え用
正規化はAdd同様

・func (h Header) Write(w io.Writer) error
ワイヤーフォーマットでヘッダーを書き込む

・func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error
ワイヤフォーマットの書き込みの別パターン
excludeを指定できる



・type Request struct {
        // Method specifies the HTTP method (GET, POST, PUT, etc.).
        // For client requests, an empty string means GET.
        Method string

        // URL specifies either the URI being requested (for server
        // requests) or the URL to access (for client requests).
        URL *url.URL

        // The protocol version for incoming server requests.
        Proto      string // "HTTP/1.0"
        ProtoMajor int    // 1
        ProtoMinor int    // 0

        // Header contains the request header fields either received
        // by the server or to be sent by the client.
        //	Host: example.com
        //	accept-encoding: gzip, deflate
        //	Accept-Language: en-us
        //	fOO: Bar
        //	foo: two
        //
        // then
        //
        //	Header = map[string][]string{
        //		"Accept-Encoding": {"gzip, deflate"},
        //		"Accept-Language": {"en-us"},
        //		"Foo": {"Bar", "two"},
        //	}
        //
        Header Header

        // Body is the request's body.
        Body io.ReadCloser

        // GetBody defines an optional func to return a new copy of
        // Body. It is used for client requests when a redirect requires
        // reading the body more than once. Use of GetBody still
        // requires setting Body.
        // For server requests, it is unused.
        GetBody func() (io.ReadCloser, error) // Go 1.8

        // ContentLength records the length of the associated content.
        // The value -1 indicates that the length is unknown.
        ContentLength int64

        TransferEncoding []string

        // For server requests, the HTTP server handles this automatically
        // and this field is not needed by Handlers.
        //
        // For client requests, setting this field prevents re-use of
        // TCP connections between requests to the same hosts, as if
        // Transport.DisableKeepAlives were set.
        Close bool

        Host string

        // Form contains the parsed form data, including both the URL
        // field's query parameters and the POST or PUT form data.
        // This field is only available after ParseForm is called.
        // The HTTP client ignores Form and uses Body instead.
        Form url.Values

        // PostForm contains the parsed form data from POST, PATCH,
        // or PUT body parameters.
        //
        // This field is only available after ParseForm is called.
        // The HTTP client ignores PostForm and uses Body instead.
        PostForm url.Values // Go 1.1

        // MultipartForm is the parsed multipart form, including file uploads.
        // This field is only available after ParseMultipartForm is called.
        // The HTTP client ignores MultipartForm and uses Body instead.
        MultipartForm *multipart.Form

        Trailer Header

        RemoteAddr string

        RequestURI string

        TLS *tls.ConnectionState

        // Cancel is an optional channel whose closure indicates that the client
        // request should be regarded as canceled. Not all implementations of
        // RoundTripper may support Cancel.
        // For server requests, this field is not applicable.
        Cancel <-chan struct{} // Go 1.5

        // Response is the redirect response which caused this request
        // to be created. This field is only populated during client
        // redirects.
        Response *Response // Go 1.7
        // contains filtered or unexported fields
}
サーバによって受信された、またはクライアントが送信するHTTPリクエストを表す

・func NewRequest(method, url string, body io.Reader) (*Request, error)
メソッド、URL、リクエストボディを渡すとそのリクエストを返す
サーバハンドラのテストをする場合はnet/http/httptestパッケージのNewRequest関数を使う

・func (r *Request) AddCookie(c *Cookie)
リクエストにクッキーを追加する

・func (r *Request) BasicAuth() (username, password string, ok bool)
Authorizationヘッダーに指定されているベーシック認証のユーザ名、パスワードを返す

・func (r *Request) Cookie(name string) (*Cookie, error)
名前付きクッキーを返す
見つからないとエラー

・func (r *Request) Cookies() []*Cookie
送信されたすべてのクッキーを返す

・func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)
フォームキーの最初のファイルを返す
サーバ側？

・func (r *Request) FormValue(key string) string
フォームキーにあう最初の値を返す
POST、PUTの場合はURLよりボディが優先される
キーがない場合は空文字
サーバ側？

・func (r *Request) MultipartReader() (*multipart.Reader, error)
multipart/form-dataまたはmultipart/mixedのPOST要求である場合はMIMEマルチパートリーダーを返し、
それ以外の場合はnilとエラーを返す
リクエストボディをストリームとして扱う場合に使う
サーバ側？

・func (r *Request) ParseForm() error
リクエストのForm、PostFormを作る
リクエストのURLやボディの値を解析して作る

・func (r *Request) ParseMultipartForm(maxMemory int64) error
ParseFormのボディサイズが大きいときに使う全体版

・func (r *Request) PostFormValue(key string) string
FormValueのPOST版
URLクエリパラメータを無視する

・func (r *Request) SetBasicAuth(username, password string)
ユーザ名、パスワードをAuthenticationヘッダにセットする


・type Response struct {
        Status     string // e.g. "200 OK"
        StatusCode int    // e.g. 200
        Proto      string // e.g. "HTTP/1.0"
        ProtoMajor int    // e.g. 1
        ProtoMinor int    // e.g. 0

        Header Header

        Body io.ReadCloser

        ContentLength int64

        TransferEncoding []string

        Close bool

        Uncompressed bool // Go 1.7

        Trailer Header

        Request *Request

        TLS *tls.ConnectionState // Go 1.3
}



・type ServeMux struct {
        // contains filtered or unexported fields
}
ハンドラの登録に使う
DefaultServeMuxの元構造体

・func NewServeMux() *ServeMux
新しいServeMuxを作る

・func (mux *ServeMux) Handle(pattern string, handler Handler)
ハンドラの登録

・func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))
ハンドラ関数の登録

・func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string)
リクエストに対するハンドラを返す

・func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)
URLに最も近いハンドラをディスパッチする


・type Server struct {
        Addr    string  // TCP address to listen on, ":http" if empty
        Handler Handler // handler to invoke, http.DefaultServeMux if nil

        TLSConfig *tls.Config

        ReadTimeout time.Duration

        ReadHeaderTimeout time.Duration // Go 1.8

        WriteTimeout time.Duration

        IdleTimeout time.Duration // Go 1.8

        MaxHeaderBytes int

        TLSNextProto map[string]func(*Server, *tls.Conn, Handler) // Go 1.1

        ConnState func(net.Conn, ConnState) // Go 1.3

        ErrorLog *log.Logger // Go 1.3
        // contains filtered or unexported fields
}
HTTPサーバを起動するために必要なパラメータをもつ構造体

・func (srv *Server) Close() error
Shutdownと違い接続も含めて強制的に落とす

・func (srv *Server) ListenAndServe() error
Addrで接続設定をした後Serveでサーバを起動する
必ず何かしらのエラーが返る
Closeされた場合はErrServerClosedのエラーが返る

・func (srv *Server) RegisterOnShutdown(f func())
サーバをShutdownする関数を登録できる

・func (srv *Server) Serve(l net.Listener) error
サーバを起動し、リクエストに対するハンドラをゴールーチンで起動する

・func (srv *Server) Shutdown(ctx context.Context) error
接続等がちゃんと終了した後にサーバを停止する


＜インタフェース＞
・type Handler interface {
        ServeHTTP(ResponseWriter, *Request)
}

HTTPリクエストへの応答を表す
ServeHTTPは応答ヘッダとデータをResponseWriterに書き込んでから戻る必要がある
呼び出し後にResponseWriterへのアクセスは禁止される
MWによってはResponseWriterに書き込むとRequest.Bodyを読めなくなるので先にリクエストは読み込むべき
ハンドラはリクエストを修正してはいけない
基本的にハンドラでパニックが起きた場合、サーバは回復させる

・func FileServer(root FileSystem) Handler
ルートパスをルートとするファイルシステムの内容でHTTP要求を処理するハンドラを返す
OSのファイルシステムを利用するためにhttp.Dirを使う
index.htmlで終わるパスはすべて同じパスにリダイレクトする

・func NotFoundHandler() Handler
NotFoundを返す単純なハンドラを返す
ルートパスとかにつけとくと便利

・func RedirectHandler(url string, code int) Handler
指定したURLにリダイレクトするハンドラを返す
コードは3xx系
通常はStatusMovedPermanently、StatusFoundまたはStatusSeeOther

・func StripPrefix(prefix string, h Handler) Handler
リクエストURLのパスから指定されたプレフィックスを削除してハンドラを呼び出すハンドラを返す
指定したプレフィックスで始まっていないアクセスは404で処理する
ファイルサーバと連携させるのに使う

・func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler
指定された時間で実行するハンドラを返す
実行時間を超えた場合は503を返す


・type Pusher interface {
        Push(target string, opts *PushOptions) error
}
HTTP/2のサーバプッシュに関するインタフェース



・type ResponseWriter interface {
        Header() Header

        Write([]byte) (int, error)

        WriteHeader(statusCode int)
}
Handlerによってレスポンスを記述するために使われるインタフェース
ServeHTTP終了後は利用できない



